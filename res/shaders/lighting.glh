uniform vec3 C_cameraPosition;

uniform float M_specularIntensity;
uniform float M_specularExponent;

struct BaseLight
{
	vec3 color;
	float intensity;
};

struct Attenuation
{
	float constant;
	float linear;
	float exponent;
};

struct DirectionalLight
{
	BaseLight baseLight;
	vec3 direction;
};

struct PointLight
{
	BaseLight baseLight;
	Attenuation attenuation;
	vec3 position;
	float range;
};

struct SpotLight
{
	PointLight pointLight;
	vec3 direction;
	float cutoff;
};

vec4 calcLight(BaseLight baseLight, vec3 direction, vec3 normal, vec3 worldPos)
{
	float diffuseFactor = dot(normal, -direction);
    
    vec4 diffuseColor = vec4(0, 0, 0, 0);
    vec4 specularColor = vec4(0, 0, 0, 0);
    
    if(diffuseFactor > 0)
    {
        diffuseColor = vec4(baseLight.color, 1.0) * baseLight.intensity * diffuseFactor;
        
        vec3 directionToEye = normalize(C_cameraPosition - worldPos);
        
        vec3 reflectDirection = normalize(reflect(direction, normal));
        float specularFactor = dot(directionToEye, reflectDirection);
        
        //vec3 halfDirection = normalize(directionToEye - direction);
        //float specularFactor = dot(halfDirection, normal);
        
        specularFactor = pow(specularFactor, M_specularExponent);
        
        if(specularFactor > 0)
        {
        	specularColor = vec4(baseLight.color, 1.0) * M_specularIntensity * specularFactor;
        }
    }
    
    return diffuseColor + specularColor;
}

vec4 calcPointLight(PointLight pointLight, vec3 normal, vec3 worldPos)
{
	vec3 lightDirection = worldPos - pointLight.position;
	float distanceToPoint = length(lightDirection);
	
	if(distanceToPoint > pointLight.range)
		return vec4(0, 0, 0, 0);
		
	lightDirection = normalize(lightDirection);
	
	vec4 color = calcLight(pointLight.baseLight, lightDirection, normal, worldPos);
	
	float attenuation = pointLight.attenuation.constant + pointLight.attenuation.linear * distanceToPoint + pointLight.attenuation.exponent * distanceToPoint * distanceToPoint + 0.0001;

	return color / attenuation;
}

vec4 calcSpotLight(SpotLight spotLight, vec3 normal, vec3 worldPos)
{
	vec3 lightDirection = normalize(worldPos - spotLight.pointLight.position);
	float spotFactor = dot(lightDirection, spotLight.direction);
	
	vec4 color = vec4(0, 0, 0, 0);
	
	if(spotFactor > spotLight.cutoff)
	{
		color = calcPointLight(spotLight.pointLight, normal, worldPos) * (1.0 - (1.0 - spotFactor) / (1.0 - spotLight.cutoff));
	}
	
	return color;
}

vec4 calcDirectionalLight(DirectionalLight directionalLight, vec3 normal, vec3 worldPos)
{
	return calcLight(directionalLight.baseLight, -directionalLight.direction, normal, worldPos);
}